def deserialize_message_list(messages):
    data = []
    try:
        for m in messages:
            s = m.value().decode("utf-8").replace("–ú", "M")
            if s[-2] == ",":
                s = f"{s[:-2]}}}"
            data.append(json.loads(s))
    except Exception as e:
        logger.info(e)
        logger.info(m.value())
        raise e

    message_timestamp = [m.timestamp() for m in messages]
    value_list = []

    for index, raw in enumerate(data):
        row = {}
        # ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ 9 –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            if col == "S$KAFKA_TIMESTAMP":
                row[col] = datetime.datetime.fromtimestamp(message_timestamp[index][1] / 1e3) + timedelta(hours=5)
            else:
                row[col] = raw.get(col, None)

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        try:
            if row["DEP_ID"] is not None:
                row["DEP_ID"] = str(row["DEP_ID"])
            if row["ID"] is not None:
                row["ID"] = int(row["ID"])

            for key in ("DOP", "CR_EXP_PD_DAY", "CR_EXP_IN_DAY"):
                value = row.get(key)
                if value and isinstance(value, str):
                    try:
                        row[key] = datetime.datetime.fromisoformat(value.strip())
                    except ValueError:
                        try:
                            row[key] = datetime.datetime.strptime(value.strip(), "%d.%m.%y")
                        except ValueError:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã {key}: {value}")
                            row[key] = None
                else:
                    row[key] = None

            if row["DEA_CODE"] is not None:
                row["DEA_CODE"] = str(row["DEA_CODE"])
            if row["CR_EXP_IN"] is not None:
                row["CR_EXP_IN"] = float(row["CR_EXP_IN"])
            if row["CR_EXP_PD"] is not None:
                row["CR_EXP_PD"] = float(row["CR_EXP_PD"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤: {e}, row={row}")

        values = tuple(row[col] for col in columns)
        value_list.append(values)

    # üîé –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ 9 –∑–Ω–∞—á–µ–Ω–∏–π
    for idx, row in enumerate(value_list):
        if len(row) != len(columns):
            logger.error(f"–°—Ç—Ä–æ–∫–∞ {idx} –∏–º–µ–µ—Ç {len(row)} –∑–Ω–∞—á–µ–Ω–∏–π: {row}")

    return value_list
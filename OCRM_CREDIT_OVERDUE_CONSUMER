def deserialize_message_list(messages):
    data = []
    try:
        for m in messages:
            s = m.value().decode("utf-8").replace("М", "M")
            if s[-2] == ",":
                s = f"{s[:-2]}}}"
            data.append(json.loads(s))
    except Exception as e:
        logger.info(e)
        logger.info(m.value())
        raise e

    message_timestamp = [m.timestamp() for m in messages]

    data = [{k: v for k, v in d.items() if k in columns} for d in data]
    value_list = []

    for index, row in enumerate(data):
        row["KAFKA_TIMESTAMP"] = datetime.datetime.fromtimestamp(
            message_timestamp[index][1] / 1e3
        ) + timedelta(hours=5)

        for key in row:
            if key == "DEP_ID":
                row[key] = str(row[key])
            elif key == "ID":
                row[key] = int(row[key])
            elif key in ("DOP", "CR_EXP_PD_DAY", "CR_EXP_IN_DAY"):
                value = row.get(key)
                if not value or not isinstance(value, str) or value.strip() == "":
                    row[key] = ""
                else:
                    value = value.strip()
                    try: 
                        date_obj = datetime.datetime.fromisoformat(value)
                    except ValueError:
                        try:
                            date_obj = datetime.datetime.strptime(value, "%d.%m.%y")
                        except ValueError:
                            logger.warning(f"Неизвестный формат даты DOP: {value}")
                            row[key] = ""
                            continue
                    row[key] = date_obj
            elif key == "DEA_CODE":
                row[key] = str(row[key])
            elif key == "CR_EXP_IN":
                row[key] = float(row[key])
            elif key == "CR_EXP_PD":
                row[key] = float(row[key])

        logger.info(f"Row keys: {list(row.keys())}")
        logger.info(f"Row values: {list(row.values())} (count={len(row.values())})")

        values = tuple(row.values())
        value_list.append(values)

    return value_list


def insert_rows_to_oracle_db(messages, oracle_hook) -> None:
    data_insert = list(deserialize_message_list(messages))
    logger.info(f"data_insert count: {len(data_insert)}")
    logger.info(f"columns count: {len(columns)}, columns: {columns}")

    for idx, row in enumerate(data_insert[:5]):  # Логируем первые 5 строк
        logger.info(f"Insert row {idx}: {row} (count={len(row)})")

    oracle_hook.insert_rows(
        "DSSB_DE.F$OCRM_CREDIT_OVERDUE",
        data_insert,
        columns,
        commit_every=10_000
    )